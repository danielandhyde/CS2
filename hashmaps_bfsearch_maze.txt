/*
Daniel Thew
P4 - Mazes
COP3503 - Prof. Guha
Spring 2022
 */

import java.util.*;

public class mazes2 {
    //global variables for convenience; once implemented, they won't change
    //rows and cols as entered by the user
    static int rows, cols;
    //vector arrays for y and x adjacent spaces
    static int[] DX = {-1,0,0,1};
    static int[] DY = {0,-1,1,0};
    
    //main
    public static void main(String[] args) {
        //scanner; scan in the rows and cols from the user
        Scanner hal = new Scanner(System.in);
        rows = hal.nextInt();
        cols = hal.nextInt();
        hal.nextLine();
        
        //scan in the board
        char[][] board = new char[rows][cols];
        for(int i = 0; i < rows; i++){
            board[i] = hal.nextLine().toCharArray();
        }
        
        //get the player's starting coords and the coords of the end location
        int[] startCoords = playerCoords(board);
        int[] endCoords = cashCoords(board);
        
        //declare and initalize a HashMap to hold the board's character spaces and their indices, as well as an arraylist to hold each character
        HashMap<Character, ArrayList<Integer>> letters = new HashMap<>();
        ArrayList<Character> list_letters = new ArrayList<>();
        getLetters(board, list_letters, letters);
        
        //get the fewest number of moves needed to complete the board and print
        int rVal = bfs(board, startCoords[0], startCoords[1], endCoords[0], endCoords[1], letters);
        System.out.println(rVal);
    }

    //function to fill the HashMap of characters and indices and the ArrayList of letters
    public static void getLetters(char[][] board, ArrayList<Character> list_letters, HashMap<Character, ArrayList<Integer>> letters){
        //for each coordinate pair
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                //if the board holds a character
                if(Character.isLetter(board[i][j])){
                    //if it's an unused character, add it to the HashMap and ArrayList
                    if(!list_letters.contains(board[i][j])){
                        list_letters.add(board[i][j]);
                        letters.put(board[i][j], new ArrayList<Integer>());
                    }
                    //regardless, add the coordinate index to the corresponding ArrayList in the HashMap
                    letters.get(board[i][j]).add((i*cols)+j);
                }
            }
        }
    }

    //Breadth-First Search algorithm for the fewest number of moves
    public static int bfs(char[][] board, int startX, int startY, int endX, int endY, HashMap<Character, ArrayList<Integer>> letters) {
        //declare a queue using a LinkedList, and declare and initialize an adjacency matrix with the board's dimensions, filling spaces with -1 (but start with 0)
        LinkedList<Integer> queue = new LinkedList<>();
        int[][] adj = new int[rows][cols];
        for (int i = 0; i < rows; i++)
            Arrays.fill(adj[i], -1);
        adj[startX][startY] = 0;
        //and add the very first coord index to the queue
        queue.add((startX * cols) + startY);
        
        //while there are still paths to check through the queue
        while (!queue.isEmpty()) {
            //remove the first coord index from the queue; if it's the end index, return its adjacency matrix value
            int index = queue.poll();
            if (index == (endX*cols)+endY) return adj[index / cols][index % cols];
            //for each adjacent space
            for (int i = 0; i < DX.length; i++) {
                //get the next adjacent set of coords and get their index
                int x = (index / cols) + DX[i];
                int y = (index % cols) + DY[i];
                int ind2 = (x*cols)+y;
                //if this space is out of bounds, has been used, or can't be used, continue the loop
                if (!inbounds(x, y) || adj[x][y] != -1 || board[x][y] == '!') continue;
                //otherwise, add the index to the queue and make its adjacency value one greater than the value of the previous space
                queue.add(ind2);
                adj[x][y] = adj[index / cols][index % cols] + 1;
                //if THIS space is the end, then return its adjacency matrix value
                if (ind2 == (endX*cols)+endY) return adj[ind2 / cols][ind2 % cols];
            }
            //if the HashMap of letter indices contains this index
            if(letters.containsKey(board[index/cols][index%cols])){
                //for each index in the ArrayList at the current index in the HashMap
                for(int j = 0; j < letters.get(board[index/cols][index%cols]).size(); j++){
                    //get the coord index of each warp space; if it's the one we're on now, skip
                    int holder = letters.get(board[index/cols][index%cols]).get(j);
                    if(holder==index) continue;
                    //add the index to the queue, and only increase its adjacency by 1
                    queue.add(holder);
                    adj[holder/cols][holder%cols] = adj[index/cols][index%cols]+1;
                }
            }
        }
        //return -1 if we can't get to the end
        return -1;
    }

    //function to check if coordinates are within the user's bounds
    public static boolean inbounds(int x, int y){
        if(x<0||x>=rows||y<0||y>=cols) return false;
        else return true;
    }

    //function to find the asterisk and return its coordinates in an int array, where the first index is x and the second is y
    public static int[] playerCoords(char[][] board){
        int[] coords = new int[2];
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(board[i][j]=='*'){
                    coords[0] = i;
                    coords[1] = j;
                }
            }
        }
        return coords;
    }

    //function to find the cash sign and return its coordinates in an int array, where the first index is x and the second is y
    public static int[] cashCoords(char[][] board){
        int[] coords = new int[2];
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(board[i][j]=='$'){
                    coords[0] = i;
                    coords[1] = j;
                }
            }
        }
        return coords;
    }
}
